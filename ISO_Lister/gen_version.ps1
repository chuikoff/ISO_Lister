# gen_version.ps1 — генерирует version_auto.h из Git
# Запуск в Pre-Build: powershell -ExecutionPolicy Bypass -File "$(ProjectDir)\gen_version.ps1"
$ErrorActionPreference = "Stop"

function Write-Header-Atomic($path, $text) {
    $tmp = "$path.tmp"
    # Нормализуем переводы строк в CRLF
    $normalized = $text -replace "(`r)?`n","`r`n"
    # UTF-8 WITH BOM — rc.exe обрабатывает предсказуемо
    $enc = New-Object System.Text.UTF8Encoding($true)
    [System.IO.File]::WriteAllText($tmp, $normalized + "`r`n", $enc)
    if (Test-Path $path) { Remove-Item -Force $path }
    Move-Item -Force $tmp $path
}

# Мягко читаем git (чтобы проект собирался и без него)
$describe = ""; $sha = ""; $dirty = 0
try {
    $describe = (git describe --tags --long --abbrev=7 --dirty --always).Trim()
    $sha = (git rev-parse --short=7 HEAD).Trim()
    if ((git status --porcelain).Length -gt 0) { $dirty = 1 }
} catch {
    $describe = ""; $sha = "unknown"; $dirty = 0
}

# Версия по умолчанию
$major = 1; $minor = 0; $patch = 0; $build = 0
$versionStr = "1.0.0.0"

if ($describe -match "^v(\d+)\.(\d+)\.(\d+)-(\d+)-g([0-9a-fA-F]+)(-dirty)?$") {
    $major = [int]$matches[1]; $minor = [int]$matches[2]; $patch = [int]$matches[3]
    $build = [int]$matches[4]; $sha = $matches[5]
    if ($matches[6]) { $dirty = 1 }
    $versionStr = "$major.$minor.$patch.$build"
}
elseif ($describe -match "^v(\d+)\.(\d+)\.(\d+)$") {
    $major = [int]$matches[1]; $minor = [int]$matches[2]; $patch = [int]$matches[3]
    $build = 0
    $versionStr = "$major.$minor.$patch.$build"
}
elseif ($describe) {
    try { $build = [int](git rev-list --count HEAD) } catch { $build = 0 }
    $versionStr = "0.1.0.$build"
}

$gitShaStr = $sha
if ($dirty -eq 1 -and $sha -ne "unknown") { $gitShaStr = "$sha-dirty" }
$ts = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")

# Генерируем СТРОГО C/RC-дружественный заголовок: без #pragma once, только #ifndef-guard
$hdr = @"
// Auto-generated by gen_version.ps1. Do not edit manually.
#ifndef ISO_LISTER_VERSION_AUTO_H
#define ISO_LISTER_VERSION_AUTO_H

#define ISO_LISTER_VER_MAJOR $major
#define ISO_LISTER_VER_MINOR $minor
#define ISO_LISTER_VER_PATCH $patch
#define ISO_LISTER_VER_BUILD $build

#define ISO_LISTER_VERSION_STR  "$versionStr"
#define ISO_LISTER_GIT_SHA      "$gitShaStr"
#define ISO_LISTER_BUILD_TIMESTAMP "$ts"

#define ISO_LISTER_VERSION_WSTR         L"$versionStr"
#define ISO_LISTER_GIT_SHA_WSTR         L"$gitShaStr"
#define ISO_LISTER_BUILD_TIMESTAMP_WSTR L"$ts"

#endif // ISO_LISTER_VERSION_AUTO_H
"@

$path = Join-Path $PSScriptRoot "version_auto.h"
Write-Header-Atomic -path $path -text $hdr
Write-Host "version_auto.h generated: $versionStr ($gitShaStr @ $ts)"
